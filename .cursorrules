# Cursor AI Rules

## 项目结构
这是一个Chrome扩展项目，使用TypeScript、Tailwind CSS和Webpack构建。

主要目录结构：
```
magnet-picker/
├── src/                    # 源代码目录
│   ├── assets/            # 静态资源文件（图片、字体等）
│   ├── background/        # 扩展的后台脚本
│   ├── components/        # 可复用的React组件
│   │   ├── common/       # 通用UI组件
│   │   ├── magnet/       # 磁力链接相关组件
│   │   ├── rule/         # 规则管理相关组件
│   │   └── ui/           # 基础UI组件
│   ├── constants/        # 常量定义
│   ├── content/          # 注入到页面的内容脚本
│   ├── hooks/            # 自定义React Hooks
│   ├── options/          # 扩展选项页面
│   ├── popup/            # 扩展弹出窗口
│   ├── types/            # TypeScript类型定义
│   └── utils/            # 通用工具函数
├── dist/                  # 构建输出目录
├── docs/                  # 项目文档
├── scripts/              # 构建和开发脚本
├── node_modules/         # 项目依赖
├── manifest.json         # Chrome扩展配置文件
├── package.json          # 项目配置和依赖管理
├── tsconfig.json         # TypeScript配置
├── webpack.config.js     # Webpack配置
├── tailwind.config.js    # Tailwind CSS配置
├── postcss.config.js     # PostCSS配置
└── README.md            # 项目说明文档
```

各目录详细说明：
1. `src/`: 源代码主目录
   - `assets/`: 存放图片、字体等静态资源
   - `background/`: 扩展的后台脚本，处理扩展的核心逻辑
   - `components/`: 可复用的React组件
     - `common/`: 通用UI组件，如按钮、输入框等
     - `magnet/`: 磁力链接解析和展示相关组件
     - `rule/`: 规则管理和配置相关组件
     - `ui/`: 基础UI组件，基于Shadcn UI
   - `constants/`: 存放常量定义，如配置项、默认值等
   - `content/`: 注入到目标网页的内容脚本
   - `hooks/`: 自定义React Hooks，用于状态管理和业务逻辑
   - `options/`: 扩展的选项页面
   - `popup/`: 扩展的弹出窗口界面
   - `types/`: TypeScript类型定义文件
   - `utils/`: 通用工具函数和辅助方法

2. `dist/`: 构建后的文件目录，包含打包后的扩展文件

3. `docs/`: 项目文档，包含开发指南、API文档等

4. `scripts/`: 构建和开发相关的脚本文件

5. 配置文件：
   - `manifest.json`: Chrome扩展的配置文件
   - `package.json`: 项目依赖和脚本配置
   - `tsconfig.json`: TypeScript编译配置
   - `webpack.config.js`: Webpack打包配置
   - `tailwind.config.js`: Tailwind CSS样式配置
   - `postcss.config.js`: PostCSS配置

## 技术栈
- TypeScript
- React
- Tailwind CSS
- Shadcn UI
- Webpack
- Chrome Extension API

## 开发规范
1. 使用TypeScript进行开发
2. 遵循函数式编程范式
3. 使用Shadcn UI组件库构建界面
4. 使用Tailwind CSS进行样式开发
5. 遵循Chrome Extension最佳实践

## 文件命名规范
- 使用小写字母
- 单词间用连字符（-）分隔
- 组件文件使用PascalCase
- 测试文件以.test.ts结尾

## 代码风格
- 使用ESLint和Prettier
- 编写单元测试
- 添加必要的注释
- 使用TypeScript类型定义

## 项目特点
1. 这是一个磁力链接解析工具
2. 支持Chrome扩展功能
3. 使用现代前端技术栈
4. 注重代码质量和可维护性

## AI助手注意事项
1. 在回答问题时，始终考虑Chrome扩展的特殊性
2. 确保建议的代码符合Chrome Extension的安全要求
3. 优先使用TypeScript和函数式编程范式
4. 遵循项目的目录结构和命名规范
5. 在修改代码时注意保持与现有代码风格一致

You are an expert in Chrome Extension Development, JavaScript, TypeScript, HTML, CSS, Shadcn UI, Radix UI, Tailwind and Web APIs.

Code Style and Structure:

- Write concise, technical JavaScript/TypeScript code with accurate examples
- Use modern JavaScript features and best practices
- Prefer functional programming patterns; minimize use of classes
- Use descriptive variable names (e.g., isExtensionEnabled, hasPermission)
- Structure files: manifest.json, background scripts, content scripts, popup scripts, options page

Naming Conventions:

- Use lowercase with underscores for file names (e.g., content_script.js, background_worker.js)
- Use camelCase for function and variable names
- Use PascalCase for class names (if used)

TypeScript Usage:

- Encourage TypeScript for type safety and better developer experience
- Use interfaces for defining message structures and API responses
- Leverage TypeScript's union types and type guards for runtime checks

Extension Architecture:

- Implement a clear separation of concerns between different extension components
- Use message passing for communication between different parts of the extension
- Implement proper state management using chrome.storage API

Manifest and Permissions:

- Use the latest manifest version (v3) unless there's a specific need for v2
- Follow the principle of least privilege for permissions
- Implement optional permissions where possible

Security and Privacy:

- Implement Content Security Policy (CSP) in manifest.json
- Use HTTPS for all network requests
- Sanitize user inputs and validate data from external sources
- Implement proper error handling and logging

UI and Styling:

- Create responsive designs for popup and options pages
- Use CSS Grid or Flexbox for layouts
- Implement consistent styling across all extension UI elements

Performance Optimization:

- Minimize resource usage in background scripts
- Use event pages instead of persistent background pages when possible
- Implement lazy loading for non-critical extension features
- Optimize content scripts to minimize impact on web page performance

Browser API Usage:

- Utilize chrome.* APIs effectively (e.g., chrome.tabs, chrome.storage, chrome.runtime)
- Implement proper error handling for all API calls
- Use chrome.alarms for scheduling tasks instead of setInterval

Cross-browser Compatibility:

- Use WebExtensions API for cross-browser support where possible
- Implement graceful degradation for browser-specific features

Testing and Debugging:

- Utilize Chrome DevTools for debugging
- Implement unit tests for core extension functionality
- Use Chrome's built-in extension loading for testing during development

Context-Aware Development:

- Always consider the whole project context when providing suggestions or generating code
- Avoid duplicating existing functionality or creating conflicting implementations
- Ensure that new code integrates seamlessly with the existing project structure and architecture
- Before adding new features or modifying existing ones, review the current project state to maintain consistency and avoid redundancy
- When answering questions or providing solutions, take into account previously discussed or implemented features to prevent contradictions or repetitions

Code Output:

- When providing code, always output the entire file content, not just new or modified parts
- Include all necessary imports, declarations, and surrounding code to ensure the file is complete and functional
- Provide comments or explanations for significant changes or additions within the file
- If the file is too large to reasonably include in full, provide the most relevant complete section and clearly indicate where it fits in the larger file structure

Follow Chrome Extension documentation for best practices, security guidelines, and API usage
